import Foundation

enum LexaApi {}

extension LexaApi {
    nonisolated enum HTTPMethod: String {
        case GET, POST, PUT, DELETE, PATCH
    }
    
    nonisolated enum HTTPResponseType {
        case yaml, json, jsonl
    }
    
    nonisolated protocol Request<ResponseType> {
        associatedtype ResponseType: Decodable
        var response: HTTPResponseType { get }
        var path: String { get }
        var method: HTTPMethod { get }
        var queryParameters: [String: String]? { get }
        var body: Encodable? { get }
    }
    
    nonisolated struct GetStructuredMessageDefsRoot: Request {
        typealias ResponseType = StructuredMessageDefsRoot
        
        var response: LexaApi.HTTPResponseType { .yaml }
        var path: String { "/api/v26_0_0/structuredmessagedefs/_index.yml" }
        var method: HTTPMethod { .GET }
        var queryParameters: [String: String]? { nil }
        var body: Encodable? { nil }
    }
    
    nonisolated struct StructuredMessageDefsRoot: Codable {
        var version: Int
        var absolutePaths: [String]
    }
    
    nonisolated struct GetStructuredMessageDef: Request {
        typealias ResponseType = [StructuredMessageDefNode]
        let path: String
        
        var response: LexaApi.HTTPResponseType { .yaml }
        var method: HTTPMethod { .GET }
        var queryParameters: [String: String]? { nil }
        var body: Encodable? { nil }
    }
    
    nonisolated struct GetStructuredMessageTests: Request {
        typealias ResponseType = [[LanguageModelMessage]]
        
        var response: LexaApi.HTTPResponseType { .jsonl }
        var path: String { "/api/v26_0_0/_autogenerated/structuredmessageeval.jsonl" }
        var method: HTTPMethod { .GET }
        var queryParameters: [String: String]? { nil }
        var body: Encodable? { nil }
    }
    
    nonisolated struct LanguageModelMessage: Codable {
        enum Role: String, Codable {
            case system, user, assistant
        }
        var content: String
        var role: Role
    }
    
    enum LanguageModelMessageError: Error {
        case missingRole(LanguageModelMessage.Role)
    }
}
